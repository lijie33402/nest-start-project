name: Deploy to Alibaba Cloud

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Alibaba Cloud Container Registry
        run: |
          echo "${{ secrets.ALIYUN_DOCKER_PASSWORD }}" | docker login --username ${{ secrets.ALIYUN_DOCKER_USERNAME }} --password-stdin crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com

      - name: Build Docker image
        run: |
          docker build --no-cache -t crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:latest .
          docker tag crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:latest \
                     crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:${{ github.sha }}

      - name: Push Docker image with retry
        run: |
          # 添加重试机制
          for i in {1..3}; do
            echo "尝试推送镜像 (第 $i 次)..."
            if timeout 1800 docker push crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:latest; then
              echo "✅ 镜像推送成功"
              break
            else
              echo "❌ 第 $i 次推送失败"
              if [ $i -eq 3 ]; then
                echo "❌ 所有推送尝试都失败了"
                exit 1
              fi
              echo "⏳ 等待 30 秒后重试..."
              sleep 30
            fi
          done

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH to server and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 登录阿里云容器服务
            docker login --username ${{ secrets.ALIYUN_DOCKER_USERNAME }} --password ${{ secrets.ALIYUN_DOCKER_PASSWORD }} crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com
            
            # 拉取最新镜像
            docker pull crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:latest
            
            # 停止并删除旧容器
            docker ps -q --filter "name=nest-start" | grep -q . && docker stop nest-start || echo "Container nest-start is not running"
            docker ps -a -q --filter "name=nest-start" | grep -q . && docker rm nest-start || echo "Container nest-start does not exist"
            
            # 创建生产环境配置文件
            cat > .env.prod << EOF
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWD=${{ secrets.DB_PASSWD }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            EOF
            
            # 运行新容器，挂载环境文件
            docker run -d \
              --name nest-start \
              -p 3000:3000 \
              --restart unless-stopped \
              -v $(pwd)/.env.prod:/app/.env.prod \
              crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:latest 