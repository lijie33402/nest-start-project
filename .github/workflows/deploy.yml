name: Deploy to Alibaba Cloud

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Alibaba Cloud Container Registry
        run: |
          echo "${{ secrets.ALIYUN_DOCKER_PASSWORD }}" | docker login --username ${{ secrets.ALIYUN_DOCKER_USERNAME }} --password-stdin crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com

      - name: Build Docker image
        run: |
          docker build --no-cache -t crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:latest .
          docker tag crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:latest \
                     crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:${{ github.sha }}

      - name: Push Docker image with retry
        run: |
          # 添加重试机制
          for tag in "latest" "${{ github.sha }}"; do
            echo "推送标签: $tag"
            for i in {1..3}; do
              echo "尝试推送镜像 $tag (第 $i 次)..."
              if timeout 1800 docker push crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:$tag; then
                echo "✅ 镜像 $tag 推送成功"
                break
              else
                echo "❌ 第 $i 次推送失败"
                if [ $i -eq 3 ]; then
                  echo "❌ 镜像 $tag 所有推送尝试都失败了"
                  exit 1
                fi
                echo "⏳ 等待 30 秒后重试..."
                sleep 30
              fi
            done
          done

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH to server and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e  # 遇到错误立即退出
            
            # 登录阿里云容器服务 - 使用安全的方式
            echo "${{ secrets.ALIYUN_DOCKER_PASSWORD }}" | docker login \
              --username "${{ secrets.ALIYUN_DOCKER_USERNAME }}" \
              --password-stdin \
              crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com
            
            # 拉取最新镜像
            echo "📦 拉取最新镜像..."
            docker pull crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:latest
            
            # 停止并删除旧容器
            echo "🛑 停止旧容器..."
            if docker ps -q --filter "name=nest-start" | grep -q .; then
              docker stop nest-start
              echo "✅ 容器已停止"
            else
              echo "ℹ️ 容器未运行"
            fi
            
            if docker ps -a -q --filter "name=nest-start" | grep -q .; then
              docker rm nest-start
              echo "✅ 容器已删除"
            else
              echo "ℹ️ 容器不存在"
            fi

            # 检查端口 3000 是否被占用
            echo "🔍 检查端口占用..."
            if docker ps -q --filter "publish=3000" | grep -q .; then
              echo "⚠️ 端口3000被占用，停止相关容器..."
              docker ps -q --filter "publish=3000" | xargs -I {} docker stop {}
              docker ps -a -q --filter "publish=3000" | xargs -I {} docker rm {}
              echo "✅ 端口已释放"
            else
              echo "ℹ️ 端口3000未被占用"
            fi
            
            # 创建生产环境配置文件 - 使用更安全的方式
            echo "📝 创建环境配置文件..."
            cat > .env.prod << 'EOF'
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWD=${{ secrets.DB_PASSWD }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            EOF
            
            # 验证环境文件创建成功
            if [ ! -f .env.prod ]; then
              echo "❌ 环境文件创建失败"
              exit 1
            fi
            
            echo "✅ 环境文件创建成功"
            
            # 运行新容器
            echo "🚀 启动新容器..."
            docker run -d \
              --name nest-start \
              -p 3000:3000 \
              --restart unless-stopped \
              -v "$(pwd)/.env.prod:/app/.env.prod:ro" \
              -v "/www/wwwroot/8pm.xyz/uploads:/www/wwwroot/8pm.xyz/uploads" \
              crpi-u9c3klbes04bh4v9.cn-hangzhou.personal.cr.aliyuncs.com/coming_soon/nest-start:latest
            
            # 验证容器启动状态
            echo "🔍 验证容器状态..."
            sleep 5
            if docker ps --filter "name=nest-start" --filter "status=running" | grep -q nest-start; then
              echo "✅ 容器启动成功"
              docker logs --tail 10 nest-start
            else
              echo "❌ 容器启动失败"
              docker logs nest-start
              exit 1
            fi
            
            echo "🎉 部署完成！" 